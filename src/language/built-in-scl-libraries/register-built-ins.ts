import { BitLogicBuiltIns } from "./basic-instructions/bit-logic-built-ins.js";
import { TimerBuiltIns } from "./basic-instructions/timer-built-ins.js";
import { ConversionBuiltIns } from "./basic-instructions/conversion-built-ins.js";
import { DataAndTimeBuiltIns } from "./extended-instructions/date-and-time-of-day-built-ins.js";
import { MathBuiltIns } from "./basic-instructions/math-built-ins.js";
import { AlarmingBuiltIns } from "./extended-instructions/alarming-built-ins.js";
import { MoveBuiltIns } from "./basic-instructions/move-built-ins.js";
import { StringAndCharBuiltIns } from "./extended-instructions/string-and-char.js";
import { ComparatorBuiltIns } from "./basic-instructions/comparator-built-ins.js";
import { CounterBuiltIns } from "./basic-instructions/counter-built-ins.js";
import { WordLogicBuiltIns } from "./basic-instructions/word-logic-built-ins.js";
import { ShiftAndRotateBuiltIns } from "./basic-instructions/shift-and-rotate-built-ins.js";
import { LegacyBuiltIns } from "./basic-instructions/legacy-built-ins.js";

// *****************************
// ****  Register builtins  ****
// *****************************

// scl-workspace-manager.ts and scl-library-file-system-provider.ts use this map to register
// the libraries as documents, and to provide correct document for navigation in VS Code.
// With this we avoid make changes in three different locations when adding new function.
export const uriMap: { [K: string]: string } = {

    // ** Basic instructions **
    ...BitLogicBuiltIns.uriMap,
    ...TimerBuiltIns.uriMap,
    ...CounterBuiltIns.uriMap,
    ...ComparatorBuiltIns.uriMap,
    ...MathBuiltIns.uriMap,
    ...MoveBuiltIns.uriMap,
    ...ConversionBuiltIns.uriMap,
    //...ProgramControlBuiltIns.uriMap,
    ...WordLogicBuiltIns.uriMap,
    ...ShiftAndRotateBuiltIns.uriMap,
    ...LegacyBuiltIns.uriMap,

    // ** Extended instructions **
    ...DataAndTimeBuiltIns.uriMap,
    ...StringAndCharBuiltIns.uriMap,
    // ...
    ...AlarmingBuiltIns.uriMap,

    // ** Technology **


    // ** Communication **


    // ** Optional packages **

    
 };

// List of functions that does not use formal parameters, so that e.g. scope calculation
// will not incorrectly limit scope in the formal parameter position of function call.
//TODO: Remove later and instead implement general solution. **Any** function that only has
// a single formal parameter is allowed to omit it. Also applies to user created functions.
const functionsWithoutFormalParameter: Set<string> = new Set<string>([
    // Built in CONVERT functions
    'BCD16_TO_INT',
    'BCD32_TO_DINT',
    'BOOL_TO_BYTE',
    'BOOL_TO_DINT',
    'BOOL_TO_DWORD',
    'BOOL_TO_INT',
    'BOOL_TO_LINT',
    'BOOL_TO_LWORD',
    'BOOL_TO_SINT',
    'BOOL_TO_UDINT',
    'BOOL_TO_UINT',
    'BOOL_TO_ULINT',
    'BOOL_TO_USINT',
    'BOOL_TO_WORD',
    'BYTE_TO_BOOL',
    'BYTE_TO_CHAR',
    'BYTE_TO_DINT',
    'BYTE_TO_DWORD',
    'BYTE_TO_INT',
    'BYTE_TO_LINT',
    'BYTE_TO_LWORD',
    'BYTE_TO_SINT',
    'BYTE_TO_UDINT',
    'BYTE_TO_UINT',
    'BYTE_TO_ULINT',
    'BYTE_TO_USINT',
    'BYTE_TO_WCHAR',
    'BYTE_TO_WORD',
    'CHAR_TO_BYTE',
    'CHAR_TO_DINT',
    'CHAR_TO_DWORD',
    'CHAR_TO_INT',
    'CHAR_TO_LINT',
    'CHAR_TO_LWORD',
    'CHAR_TO_SINT',
    'CHAR_TO_UDINT',
    'CHAR_TO_UINT',
    'CHAR_TO_ULINT',
    'CHAR_TO_USINT',
    'CHAR_TO_WCHAR',
    'CHAR_TO_WORD',
    'DB_ANY_TO_UINT',
    'DINT_TO_BCD32',
    'DINT_TO_BOOL',
    'DINT_TO_BYTE',
    'DINT_TO_CHAR',
    'DINT_TO_DWORD',
    'DINT_TO_INT',
    'DINT_TO_LINT',
    'DINT_TO_LREAL',
    'DINT_TO_LWORD',
    'DINT_TO_REAL',
    'DINT_TO_SINT',
    'DINT_TO_UDINT',
    'DINT_TO_UINT',
    'DINT_TO_ULINT',
    'DINT_TO_USINT',
    'DINT_TO_WCHAR',
    'DINT_TO_WORD',
    'DWORD_TO_BOOL',
    'DWORD_TO_BYTE',
    'DWORD_TO_CHAR',
    'DWORD_TO_DINT',
    'DWORD_TO_INT',
    'DWORD_TO_LINT',
    'DWORD_TO_LWORD',
    'DWORD_TO_REAL',
    'DWORD_TO_SINT',
    'DWORD_TO_UDINT',
    'DWORD_TO_UINT',
    'DWORD_TO_ULINT',
    'DWORD_TO_USINT',
    'DWORD_TO_WCHAR',
    'DWORD_TO_WORD',
    'INT_TO_BCD32',
    'INT_TO_BOOL',
    'INT_TO_BYTE',
    'INT_TO_CHAR',
    'INT_TO_DINT',
    'INT_TO_DWORD',
    'INT_TO_LINT',
    'INT_TO_LREAL',
    'INT_TO_LWORD',
    'INT_TO_REAL',
    'INT_TO_SINT',
    'INT_TO_UDINT',
    'INT_TO_UINT',
    'INT_TO_ULINT',
    'INT_TO_USINT',
    'INT_TO_WCHAR',
    'INT_TO_WORD',
    'LINT_TO_BOOL',
    'LINT_TO_BYTE',
    'LINT_TO_CHAR',
    'LINT_TO_DINT',
    'LINT_TO_DWORD',
    'LINT_TO_INT',
    'LINT_TO_LREAL',
    'LINT_TO_LWORD',
    'LINT_TO_REAL',
    'LINT_TO_SINT',
    'LINT_TO_UDINT',
    'LINT_TO_UINT',
    'LINT_TO_ULINT',
    'LINT_TO_USINT',
    'LINT_TO_WCHAR',
    'LINT_TO_WORD',
    'LREAL_TO_DINT',
    'LREAL_TO_INT',
    'LREAL_TO_LINT',
    'LREAL_TO_LWORD',
    'LREAL_TO_REAL',
    'LREAL_TO_SINT',
    'LREAL_TO_UDINT',
    'LREAL_TO_UINT',
    'LREAL_TO_ULINT',
    'LREAL_TO_USINT',
    'LWORD_TO_BOOL',
    'LWORD_TO_BYTE',
    'LWORD_TO_CHAR',
    'LWORD_TO_DINT',
    'LWORD_TO_DWORD',
    'LWORD_TO_INT',
    'LWORD_TO_LINT',
    'LWORD_TO_LREAL',
    'LWORD_TO_SINT',
    'LWORD_TO_UDINT',
    'LWORD_TO_UINT',
    'LWORD_TO_ULINT',
    'LWORD_TO_USINT',
    'LWORD_TO_WCHAR',
    'LWORD_TO_WORD',
    'REAL_TO_DINT',
    'REAL_TO_DWORD',
    'REAL_TO_INT',
    'REAL_TO_LINT',
    'REAL_TO_LREAL',
    'REAL_TO_SINT',
    'REAL_TO_UDINT',
    'REAL_TO_UINT',
    'REAL_TO_ULINT',
    'REAL_TO_USINT',
    'SINT_TO_BOOL',
    'SINT_TO_BYTE',
    'SINT_TO_CHAR',
    'SINT_TO_DINT',
    'SINT_TO_DWORD',
    'SINT_TO_INT',
    'SINT_TO_LINT',
    'SINT_TO_LREAL',
    'SINT_TO_LWORD',
    'SINT_TO_REAL',
    'SINT_TO_UDINT',
    'SINT_TO_UINT',
    'SINT_TO_ULINT',
    'SINT_TO_USINT',
    'SINT_TO_WCHAR',
    'SINT_TO_WORD',
    'UDINT_TO_BOOL',
    'UDINT_TO_BYTE',
    'UDINT_TO_CHAR',
    'UDINT_TO_DINT',
    'UDINT_TO_DWORD',
    'UDINT_TO_INT',
    'UDINT_TO_LINT',
    'UDINT_TO_LREAL',
    'UDINT_TO_LWORD',
    'UDINT_TO_REAL',
    'UDINT_TO_SINT',
    'UDINT_TO_UINT',
    'UDINT_TO_ULINT',
    'UDINT_TO_USINT',
    'UDINT_TO_WCHAR',
    'UDINT_TO_WORD',
    'UINT_TO_BOOL',
    'UINT_TO_BYTE',
    'UINT_TO_CHAR',
    'UINT_TO_DB_ANY',
    'UINT_TO_DINT',
    'UINT_TO_DWORD',
    'UINT_TO_INT',
    'UINT_TO_LINT',
    'UINT_TO_LREAL',
    'UINT_TO_LWORD',
    'UINT_TO_REAL',
    'UINT_TO_SINT',
    'UINT_TO_UDINT',
    'UINT_TO_ULINT',
    'UINT_TO_USINT',
    'UINT_TO_WCHAR',
    'UINT_TO_WORD',
    'ULINT_TO_BOOL',
    'ULINT_TO_BYTE',
    'ULINT_TO_CHAR',
    'ULINT_TO_DINT',
    'ULINT_TO_DWORD',
    'ULINT_TO_INT',
    'ULINT_TO_LINT',
    'ULINT_TO_LREAL',
    'ULINT_TO_LWORD',
    'ULINT_TO_REAL',
    'ULINT_TO_SINT',
    'ULINT_TO_UDINT',
    'ULINT_TO_UINT',
    'ULINT_TO_USINT',
    'ULINT_TO_WCHAR',
    'ULINT_TO_WORD',
    'USINT_TO_BOOL',
    'USINT_TO_BYTE',
    'USINT_TO_CHAR',
    'USINT_TO_DINT',
    'USINT_TO_DWORD',
    'USINT_TO_INT',
    'USINT_TO_LINT',
    'USINT_TO_LREAL',
    'USINT_TO_LWORD',
    'USINT_TO_REAL',
    'USINT_TO_SINT',
    'USINT_TO_UDINT',
    'USINT_TO_UINT',
    'USINT_TO_ULINT',
    'USINT_TO_WCHAR',
    'USINT_TO_WORD',
    'WCHAR_TO_BYTE',
    'WCHAR_TO_CHAR',
    'WCHAR_TO_DINT',
    'WCHAR_TO_DWORD',
    'WCHAR_TO_INT',
    'WCHAR_TO_LINT',
    'WCHAR_TO_LWORD',
    'WCHAR_TO_SINT',
    'WCHAR_TO_UDINT',
    'WCHAR_TO_UINT',
    'WCHAR_TO_ULINT',
    'WCHAR_TO_USINT',
    'WCHAR_TO_WORD',
    'WORD_TO_BOOL',
    'WORD_TO_BYTE',
    'WORD_TO_CHAR',
    'WORD_TO_DINT',
    'WORD_TO_DWORD',
    'WORD_TO_INT',
    'WORD_TO_LINT',
    'WORD_TO_LWORD',
    'WORD_TO_SINT',
    'WORD_TO_UDINT',
    'WORD_TO_UINT',
    'WORD_TO_ULINT',
    'WORD_TO_USINT',
    'WORD_TO_WCHAR',
    // Built in T_CONV functions (for converting date and time)
    'BYTE_TO_DATE',
    'BYTE_TO_LDT',
    'BYTE_TO_LTIME',
    'BYTE_TO_LTOD',
    'BYTE_TO_TIME',
    'BYTE_TO_TOD',
    'DATE_TO_BYTE',
    'DATE_TO_DINT',
    'DATE_TO_DT',
    'DATE_TO_DTL',
    'DATE_TO_DWORD',
    'DATE_TO_INT',
    'DATE_TO_LDT',
    'DATE_TO_LINT',
    'DATE_TO_LWORD',
    'DATE_TO_SINT',
    'DATE_TO_UDINT',
    'DATE_TO_UINT',
    'DATE_TO_ULINT',
    'DATE_TO_USINT',
    'DATE_TO_WORD',
    'DINT_TO_DATE',
    'DINT_TO_LDT',
    'DINT_TO_LTIME',
    'DINT_TO_LTOD',
    'DINT_TO_TIME',
    'DINT_TO_TOD',
    'DT_TO_DATE',
    'DT_TO_DTL',
    'DT_TO_LDT',
    'DT_TO_LTOD',
    'DT_TO_TOD',
    'DTL_TO_DATE',
    'DTL_TO_DTL',
    'DTL_TO_LDT',
    'DTL_TO_LTOD',
    'DTL_TO_TOD',
    'DWORD_TO_DATE',
    'DWORD_TO_LDT',
    'DWORD_TO_LTIME',
    'DWORD_TO_LTOD',
    'DWORD_TO_TIME',
    'DWORD_TO_TOD',
    'INT_TO_DATE',
    'INT_TO_LDT',
    'INT_TO_LTIME',
    'INT_TO_LTOD',
    'INT_TO_TIME',
    'INT_TO_TOD',
    'LDT_TO_BYTE',
    'LDT_TO_DATE',
    'LDT_TO_DINT',
    'LDT_TO_DT',
    'LDT_TO_DTL',
    'LDT_TO_DWORD',
    'LDT_TO_INT',
    'LDT_TO_LINT',
    'LDT_TO_LTIME',
    'LDT_TO_LTOD',
    'LDT_TO_LWORD',
    'LDT_TO_SINT',
    'LDT_TO_TOD',
    'LDT_TO_UDINT',
    'LDT_TO_UINT',
    'LDT_TO_ULINT',
    'LDT_TO_USINT',
    'LDT_TO_WORD',
    'LINT_TO_DATE',
    'LINT_TO_LDT',
    'LINT_TO_LTIME',
    'LINT_TO_LTOD',
    'LINT_TO_TIME',
    'LINT_TO_TOD',
    'LTIME_TO_BYTE',
    'LTIME_TO_DINT',
    'LTIME_TO_DWORD',
    'LTIME_TO_INT',
    'LTIME_TO_LDT',
    'LTIME_TO_LINT',
    'LTIME_TO_LTOD',
    'LTIME_TO_LWORD',
    'LTIME_TO_S5TIME',
    'LTIME_TO_SINT',
    'LTIME_TO_TIME',
    'LTIME_TO_UDINT',
    'LTIME_TO_UINT',
    'LTIME_TO_ULINT',
    'LTIME_TO_USINT',
    'LTIME_TO_WORD',
    'LTOD_TO_BYTE',
    'LTOD_TO_DINT',
    'LTOD_TO_DT',
    'LTOD_TO_DTL',
    'LTOD_TO_DWORD',
    'LTOD_TO_INT',
    'LTOD_TO_LDT',
    'LTOD_TO_LINT',
    'LTOD_TO_LTIME',
    'LTOD_TO_LWORD',
    'LTOD_TO_SINT',
    'LTOD_TO_TOD',
    'LTOD_TO_UDINT',
    'LTOD_TO_UINT',
    'LTOD_TO_ULINT',
    'LTOD_TO_USINT',
    'LTOD_TO_WORD',
    'LWORD_TO_DATE',
    'LWORD_TO_LDT',
    'LWORD_TO_LTIME',
    'LWORD_TO_LTOD',
    'LWORD_TO_TIME',
    'LWORD_TO_TOD',
    'S5TIME_TO_LTIME',
    'S5TIME_TO_TIME',
    'S5TIME_TO_WORD',
    'SINT_TO_DATE',
    'SINT_TO_LDT',
    'SINT_TO_LTIME',
    'SINT_TO_LTOD',
    'SINT_TO_TIME',
    'SINT_TO_TOD',
    'TIME_TO_BYTE',
    'TIME_TO_DINT',
    'TIME_TO_DWORD',
    'TIME_TO_INT',
    'TIME_TO_LINT',
    'TIME_TO_LTIME',
    'TIME_TO_LWORD',
    'TIME_TO_S5TIME',
    'TIME_TO_SINT',
    'TIME_TO_TOD',
    'TIME_TO_UDINT',
    'TIME_TO_UINT',
    'TIME_TO_ULINT',
    'TIME_TO_USINT',
    'TIME_TO_WORD',
    'TOD_TO_BYTE',
    'TOD_TO_DINT',
    'TOD_TO_DT',
    'TOD_TO_DTL',
    'TOD_TO_DWORD',
    'TOD_TO_INT',
    'TOD_TO_LDT',
    'TOD_TO_LINT',
    'TOD_TO_LTOD',
    'TOD_TO_LWORD',
    'TOD_TO_SINT',
    'TOD_TO_TIME',
    'TOD_TO_UDINT',
    'TOD_TO_UINT',
    'TOD_TO_ULINT',
    'TOD_TO_USINT',
    'TOD_TO_WORD',
    'UDINT_TO_DATE',
    'UDINT_TO_LDT',
    'UDINT_TO_LTIME',
    'UDINT_TO_LTOD',
    'UDINT_TO_TIME',
    'UDINT_TO_TOD',
    'UINT_TO_DATE',
    'UINT_TO_LDT',
    'UINT_TO_LTIME',
    'UINT_TO_LTOD',
    'UINT_TO_TIME',
    'UINT_TO_TOD',
    'ULINT_TO_DATE',
    'ULINT_TO_LDT',
    'ULINT_TO_LTIME',
    'ULINT_TO_LTOD',
    'ULINT_TO_TIME',
    'ULINT_TO_TOD',
    'USINT_TO_DATE',
    'USINT_TO_LDT',
    'USINT_TO_LTIME',
    'USINT_TO_LTOD',
    'USINT_TO_TIME',
    'USINT_TO_TOD',
    'WORD_TO_DATE',
    'WORD_TO_LDT',
    'WORD_TO_LTIME',
    'WORD_TO_LTOD',
    'WORD_TO_TIME',
    'WORD_TO_TOD',
    // Builtin functions with only an IN or OUT parameter
    'RD_SYS_T',
    'TIME_TCK',
    'LEN',
    // Builtin functions a single in, out of in_out parameter, but with special name
    'RESET_TIMER',
    'TypeOf',
    'TypeOfElements',
    'CountOfElements',
    'IS_NULL',
    'NOT_NULL',
    'IS_ARRAY',
]);

export function isBuiltInFunction(functionName: string): boolean {
    return uriMap['/builtinLibrary.' + functionName + '.scl'] !== undefined;
 }

 export function isBuiltInFunctionWithoutParameters(functionName: string): boolean {
    return functionsWithoutFormalParameter.has(functionName);
 }

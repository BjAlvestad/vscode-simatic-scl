{
  "name": "scl",
  "scopeName": "source.scl",
  "fileTypes": [
    ".scl",
    ".db",
    ".udt"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "name": "keyword.control.scl",
      "match": "\\b([aA][nN][dD]|[aA][nN][yY]|[aA][rR][rR][aA][yY]|[aA][tT]|[aA][uU][tT][hH][oO][rR]|[bB][cC][dD][11][66]|[bB][cC][dD][33][22]|[bB][eE][gG][iI][nN]|[bB][oO][oO][lL]|[bB][yY]|[bB][yY][tT][eE]|[cC][aA][sS][eE]|[cC][hH][aA][rR]|[cC][oO][nN][sS][tT][aA][nN][tT]|[cC][oO][nN][tT][iI][nN][uU][eE]|[dD][aA][tT][aA][__][bB][lL][oO][cC][kK]|[dD][aA][tT][eE]|[dD][aA][tT][eE][__][aA][nN][dD][__][lL][tT][iI][mM][eE]|[dD][aA][tT][eE][__][aA][nN][dD][__][tT][iI][mM][eE]|[dD][bB][__][aA][nN][yY]|[dD][bB][__][sS][pP][eE][cC][iI][fF][iI][cC]|[dD][iI][nN][tT]|[dD][oO]|[dD][tT]|[dD][tT][lL]|[dD][wW][oO][rR][dD]|[eE][lL][sS][eE]|[eE][lL][sS][iI][fF]|[eE][nN][dD][__][cC][aA][sS][eE]|[eE][nN][dD][__][dD][aA][tT][aA][__][bB][lL][oO][cC][kK]|[eE][nN][dD][__][fF][oO][rR]|[eE][nN][dD][__][fF][uU][nN][cC][tT][iI][oO][nN]|[eE][nN][dD][__][fF][uU][nN][cC][tT][iI][oO][nN][__][bB][lL][oO][cC][kK]|[eE][nN][dD][__][iI][fF]|[eE][nN][dD][__][oO][rR][gG][aA][nN][iI][zZ][aA][tT][iI][oO][nN][__][bB][lL][oO][cC][kK]|[eE][nN][dD][__][rR][eE][gG][iI][oO][nN]|[eE][nN][dD][__][rR][eE][pP][eE][aA][tT]|[eE][nN][dD][__][sS][tT][rR][uU][cC][tT]|[eE][nN][dD][__][tT][yY][pP][eE]|[eE][nN][dD][__][vV][aA][rR]|[eE][nN][dD][__][wW][hH][iI][lL][eE]|[eE][xX][iI][tT]|[fF][aA][mM][iI][lL][yY]|[fF][oO][rR]|[fF][uU][nN][cC][tT][iI][oO][nN]|[fF][uU][nN][cC][tT][iI][oO][nN][__][bB][lL][oO][cC][kK]|[gG][oO][tT][oO]|[hH][wW][__][aA][nN][yY]|[hH][wW][__][dD][eE][vV][iI][cC][eE]|[hH][wW][__][dD][pP][mM][aA][sS][tT][eE][rR]|[hH][wW][__][dD][pP][sS][lL][aA][vV][eE]|[hH][wW][__][hH][sS][cC]|[hH][wW][__][iI][eE][pP][oO][rR][tT]|[hH][wW][__][iI][nN][tT][eE][rR][fF][aA][cC][eE]|[hH][wW][__][iI][oO]|[hH][wW][__][iI][oO][sS][yY][sS][tT][eE][mM]|[hH][wW][__][mM][oO][dD][uU][lL][eE]|[hH][wW][__][pP][tT][oO]|[hH][wW][__][pP][wW][mM]|[hH][wW][__][sS][uU][bB][mM][oO][dD][uU][lL][eE]|[iI][fF]|[iI][nN][tT]|[lL][dD][tT]|[lL][iI][nN][tT]|[lL][rR][eE][aA][lL]|[lL][tT][iI][mM][eE]|[lL][tT][iI][mM][eE][__][oO][fF][__][dD][aA][yY]|[lL][tT][oO][dD]|[lL][wW][oO][rR][dD]|[mM][oO][dD]|[nN][aA][mM][eE]|[nN][oO][nN][__][rR][eE][tT][aA][iI][nN]|[nN][oO][tT]|[nN][uU][lL][lL]|[oO][fF]|[oO][rR]|[oO][rR][gG][aA][nN][iI][zZ][aA][tT][iI][oO][nN][__][bB][lL][oO][cC][kK]|[pP][oO][iI][nN][tT][eE][rR]|[rR][eE][aA][lL]|[rR][eE][fF][__][tT][oO]|[rR][eE][pP][eE][aA][tT]|[rR][eE][tT][aA][iI][nN]|[sS][55][tT][iI][mM][eE]|[sS][iI][nN][tT]|[sS][tT][rR][iI][nN][gG]|[sS][tT][rR][uU][cC][tT]|[tT][hH][eE][nN]|[tT][iI][mM][eE]|[tT][iI][mM][eE][__][oO][fF][__][dD][aA][yY]|[tT][oO]|[tT][oO][dD]|[tT][yY][pP][eE]|[uU][dD][iI][nN][tT]|[uU][iI][nN][tT]|[uU][lL][iI][nN][tT]|[uU][nN][tT][iI][lL]|[uU][sS][iI][nN][tT]|[vV][aA][rR]|[vV][aA][rR][iI][aA][nN][tT]|[vV][aA][rR][__][iI][nN][pP][uU][tT]|[vV][aA][rR][__][iI][nN][__][oO][uU][tT]|[vV][aA][rR][__][oO][uU][tT][pP][uU][tT]|[vV][aA][rR][__][tT][eE][mM][pP]|[vV][eE][rR][sS][iI][oO][nN]|[vV][oO][iI][dD]|[wW][cC][hH][aA][rR]|[wW][hH][iI][lL][eE]|[wW][oO][rR][dD]|[wW][sS][tT][rR][iI][nN][gG]|[xX][oO][rR]|[fF][aA][lL][sS][eE]|[rR][eE][tT][uU][rR][nN]|[tT][rR][uU][eE])\\b|\\b([tT][hH][iI][sS]\\[)\\B"
    }
  ],
  "repository": {
    "keywords": {
			"patterns": [
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(break|case|end_case|continue|do|to|else|elsif|AT|for|end_for|goto|if|end_if|return|of|while|end_while|then|repeat|until|end_repeat|exit|label|end_label|REGION|END_REGION)\\b"
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(var[\\s\\r\\n]+constant|var|var_input|var_output|var_in_out|var_temp|end_var|begin|const|end_const|type|end_type)\\b"			
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(mod|div)\\b"
				}
			]
		},
    "operators": {
			"patterns": [
				{
					"name": "keyword.control.scl",
					"match": "!|\\$|\\&|<\\=|>\\=|<>|<|>|(\\*\\*)|(\\=\\=)|!|\\&\\&|\\*|\\/|\\-|\\+|:|\\=|\\b(void)\\b"
				},
				{
					"name": "keyword.control.assignment.scl",
					"match": "\\:\\="
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(and|or|xor|not)\\b"
				},
				{
					"name": "variable.regexp.scl",
					"match": "\\#.\\w*(?!\\()\\b[.]\\w.*?\\b|\\#\\D.\\w*(?!\\()\\b|\\.\\w*|\\.\\w*"
				},
				{
					"name": "variable.regexp.scl",
					"match": "(^ (\\s*\\w*?) (?=:))|(^(\\s*\\w*?) )(?={)"
				}
			]
		},
    "storage": {
			"patterns": [
				{
					"captures": {
						"1": { "name": "storage.type.function.scl"},
						"2": { "name": "entity.name.function.scl"},
						"3": { "name": "entity.name.function.scl"},
						"7": { 
							"patterns": [
								{
									"include": "#operators"
								}
							]
						},
						"9": { 	
							"patterns": [
								{
									"include": "#support"
								}
							]
						}
					},
					"match": "(?i)\\b(function)\\s+(\"(\\w*)\")((|\\s*)((\\:)(\\s*|)(\\w*)(\\s))|)",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(?i)\\b(END_FUNCTION)\\b",
					"name": "storage.type.function.scl"
				},
				{
					"captures": {
						"1": { "name": "storage.type.function.scl"},
						"2": { "name": "entity.name.function.scl"},
						"3": { "name": "entity.name.function.scl"}
					},
					"match": "(?i)\\b(function_block)\\s+(\"(\\w*)\")?",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(?i)\\b(END_FUNCTION_BLOCK)\\b",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(\"(\\w+?)\")|\\#.*\\[\\d\\]|\\#\\w*(?=\\()",
					"name": "entity.name.function.scl"					
				},
				{
					"captures": {
						"1": {"name": "storage.type.function.scl"},
						"2": {"name": "entity.name.function.scl"},
						"3": {"name": "entity.name.function.scl"}
					},
					"match": "(?i)\\b(data_block)\\s+(\"(\\w*)\")?",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(?i)\\b(END_DATA_BLOCK)\\b",
					"name": "storage.type.function.scl"
				}
			]	
		},
		"support":{
			"patterns": [
				{
					"match": "(?i)\\b(ANY|ARRAY|BOOL|BYTE|CHAR|COUNTER|DATE|DATE_AND_TIME|SINT|SINT|INT|DINT|LINT|DTL|DT|DWORD|POINTER|REAL|LREAL|S5TIME|STRING|TIME|TIMER|TIME_OF_DAY|TOD|USINT|UINT|UDINT|ULINT|VOID|WORD|WSTRING|TON_TIME|TOF_TIME|TP_TIME|IEC_TIMER|ENO)\\b",
					"name": "support.class.scl"
				},
				{
					"match": "(?i)\\b(STRUCT|END_STRUCT)\\b",
					"name": "support.type.scl"
				},
				{
					"match": "(?i)\\b(ABS|SQR|SQRT|EXP|EXPD|LN|LOG|ACOS|ASIN|ATAN|COS|SIN|TAN)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(ROL|ROR|SHL|SHR)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(SEL|MAX|MIN|LIMIT|MUX)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(ROUND|TRUNC)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(S7_)\\w+",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(ExternalAccessible)",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(ExternalVisible)",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(ExternalWritable)",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(LibVersion)",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(InstructionName)",
					"name": "support.variable.scl"
				}
			]
		},
		"constants":{
			"patterns": [
				{
					"match": "\\b(t|T|TIME)#(((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?d)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?h)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?m)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?s)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?ms)?)\\b",	
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b(16)#[0-9A-F]([0-9A-F]|\\_)+\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b(2)#[0-1]([0-1]|\\_)+\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "(?i)\\btrue\\b",
					"name": "constant.language.boolean.true.scl"					
				},
				{
					"match": "(?i)\\bfalse\\b",
					"name": "constant.language.boolean.false.scl"					
				},
				{
					"match": "(?i)\\bnull\\b",
					"name": "constant.language.null.scl"					
				}
			]
		},
		"punctuations":{
			"patterns": [
				{
					"match": "\\;",
					"name": "punctuation.terminator.statement.scl"	
				}
			]
		},
    "comments": {
      "patterns": [
        {
          "name": "comment.block.scl",
          "begin": "\\(\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.scl"
            }
          },
          "end": "\\*\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.scl"
            }
          }
        },
        {
          "begin": "//",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.scl"
            }
          },
          "end": "(?=$)",
          "name": "comment.line.scl"
        }
      ]
    },
    "section":{
			"patterns":[
				{
					"captures": {
						"1": { "name": "keyword.other.region.scl"},
						"2": { "name": "string.unquoted.scl"}
					},
					"match": "(?i)\\b(region)\\b(.*)$\\n?"
				},
				{
					"captures": {
						"1": { "name": "keyword.other.endregion.scl"},
						"2": { "name": "string.unquoted.scl"}
					},
					"match": "(?i)\\b(end_region)\\b(.*)$\\n?"
				}
			]
		},
		"strings": {
			"name": "string.quoted.single.scl",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.scl",
					"match": "\\\\."
				},
				{
					"name": "constant.character.escape.scl",
					"match": "\\$."
				}
			]
		}
  }
}
